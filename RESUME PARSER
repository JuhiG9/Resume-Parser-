import nltk
import random
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Download the stopwords and punkt tokenizer
nltk.download('stopwords')
nltk.download('punkt')

# Sample job descriptions and corresponding labels (0: not suitable, 1: suitable)
job_descriptions = [
    ("Software Engineer with experience in Python and Django", 1),
    ("Sales representative for a fast-growing startup", 0),
    ("Data Scientist with expertise in machine learning", 1),
    ("Customer Support Executive for a multinational company", 1),
    ("Graphic Designer proficient in Adobe Creative Suite", 1),
    ("Accountant with knowledge of tax regulations", 1),
    ("Marketing Manager with SEO and SEM skills", 1),
    ("Construction Worker with experience in heavy machinery", 0),
]

# Preprocess the job descriptions
def preprocess_job_description(job_desc):
    stop_words = set(stopwords.words('english'))
    words = word_tokenize(job_desc.lower())
    words = [word for word in words if word.isalnum() and word not in stop_words]
    return " ".join(words)

job_descriptions = [(preprocess_job_description(desc), label) for desc, label in job_descriptions]

# Separate data and labels
data = [desc for desc, _ in job_descriptions]
labels = [label for _, label in job_descriptions]

# Split the data into training and testing sets
train_data, test_data, train_labels, test_labels = train_test_split(data, labels, test_size=0.2, random_state=42)

# Vectorize the data using TF-IDF
vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(train_data)
X_test = vectorizer.transform(test_data)

# Create and train the Naive Bayes classifier
classifier = MultinomialNB()
classifier.fit(X_train, train_labels)

# Make predictions on the test set
predictions = classifier.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(test_labels, predictions)
print(f"Accuracy: {accuracy:.2f}")
print("\nClassification Report:")
print(classification_report(test_labels, predictions, target_names=['Not Suitable', 'Suitable']))
